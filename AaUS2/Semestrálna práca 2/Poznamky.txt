Tester aby sa všetko otestovalo
Dinamické hešovanie

Dikitálny znakový strom
Služí na traverzovanie, v ľavo je nula v pravo je jednotka
budem traverzovať tým stromom a tak budem traverzovať tou štruktúrov
recor má fixnú veľkosť a aj blok má fixnú veľkosť
Pozor na string: musí mať definovanú max veľkosť, následne je otázka ako ju prevádzať
ku každému stringu si dať pole platných znakov, pri prevode sa musia znovu používať aj nejaké biele znaky aby sa to dalo prevázdať, a pri čítaní sa potom iba načítajú platné znaky
Data majú implementovať interface ktorý overridne getData a setData

do budúceho týždňa je potrebené zapísať si jeden blok dát a načítať jeden blok dát všetko len v prvom bloku súboru

mám insert:
    zoberiem kľúče, zavolám funkciu getHash
    traverzujem tým stromom a vložím do bloku...
    

Triedy dinameckého hešovanie D.H
Triedy dinameckého hešovanie D.H
    - root: node
    - blokovací faktor (BF) - počet blokov
    
Abstaract node:
    - parent: node

NodeIntern: node
    - lavySyn: node
    - pravySyn: node

NodeExtern: node
    - addr : int
    - count: int - čo je počet záznamov 
    
Trieda BlokData
    - record: pole ktoré je rovnaké ako BF - rozkuskuje pole podľa veľkosti čo je v recorde, vytvorý z neho veľké pole bitov
    - validCount: int - na začiatku sú platné záznami a na konci sú neplatné, alebo do recordu si dať si dam flagu ktorá bude označovať či je záznam platný alebo nie
    - getData: []byte - vráti pole bytov
    - setData: []byte - nastaví pole bytov
    - getSize: int - vráti veľkosť záznamu
    - nextBlock: int - adresa na ďalší blok
    
Trieda BlokcFreeSpace
    - nextBlock: int - adresa na ďalší blok
    - prevBlock: int - adresa na predchádzajúci blok
    
RekordData
    - getSize: int -  to je veľkosť záznamu v bitoch, každý záznam musí vrátiť vždy identickú
    - getHash: bitSet(v jave) - ideálne poľe bytov (dá sa pomocou pola bitov a pomocou posunu bitov by som zistil či tam je 0 alebo 1)
    - equals alebo operátor rovnása nutne overridnuť
    - getData :[]byte - musí mať rovnakú veľkosť ako getSize
    - potrebujem copy construktor (to si viem polsať ako referenciu do DH rekordu)
    
    
Dynamický hešovací súbor
takže mám súbor ktorý sa skladá z blokov a vždy to vkladám na koniec bloku
a potom mám seek tak nás prejde na ne najkä časť súboru
preplňujúci súbor (napr 6 záznamov)
preplňujúci súbor, je samostaná trieda ktorá je univerzálna, ale ak sa nedá tak aj univerzálne pre danú štruktúru
každý blok môže pokračovať do preplňujúceho súboru, a aj v rámci preplňujúceho súboru odkazovať na daľší
menežovanie súboru v preplňujúcom súboru
    - keďmažeme
        - zreťazenie prázdnych blokov keď potrebujem prázdny blok tak si zoberiem prvý zreťazený a tak isto mám aj referencie je aj naplnené
            - ak je na konci prázdne tak sa zmenší súbor pomocou setSize() na konci súboru nebude voľný blok
            - ak máme na konci súboru že prázdny a plný a ak zmažem ten posledný plný tak mám na konci 2 práznde bloky takže zmenším o 2 prázdne bloky
            - je potreba obojsmerné zreťazenie
        - druhý spôsob (nepoužívať) môže to byť zoznam alebo list
        
Bloky v hlavnom súbore je rovnakú súbor, kde každú súbor ma rovnaký blokovací faktor a mazanie bude fungovať rovnako
striasanie z hlavného záznamu odporúča nerobyť, ale spraviť v tedy ak dvaja synovia v tedy sa zlužia synovia do hromady

hlavičku uložiť do nejakej vlastnej režíí a tam užložím riadiace informácie
čiže budeme mať 3 súbory
    - hlavný súbor
    - preplňujúci súbor
    - hlavička (to bude ako textový súbor)
    
Kvad strom sa bude ukladať do súboru (ale len tie nevyhnutné súbori ako kľúč a súradnice...) má byť len minumálny
takže budeme mať 2 dinamické hešovania a jeden alebo 2 quadstromi

Generátor bude upravený tak aby generoval iba ten počet dát

preved dát v c# má na to peknú triedu

bit converter ktorá premení triedu na pole bitov a ja naspäť


Vysvetlovanie 2.0
- odporúča urobiť si sekvenčný vypís binárnych súborov
    - hlavný súbor a k nemu je preplňujúci, v každom súbore je istý blokový faktro napr 2 a v druhom je 3 toto je príklad,
    - výpis je myslený tak že zoberiem súbor a blok po bloku vzpíšem všetky atribútu a ak tam je adresa na predchodsu, ako všetko čo sa nacházda v ňom do konzoly
    - toto je ako prvá vec, toto má byť hlavný debug nástroj, má byť aj na gui
    - má to byť súčasťou programu
    
Ešte raz vysvetlenie
    - máme strom ten sa nachádza v operačnej pamäti, jeho úlohov je aby som zistil kam mám ísť, čiže je to adresár
    - máme hash ktorý vracia robno bit
    - bit set má vraciať max 3 bity (nemusí to byt na gui)
    
    - v strome máme 2 typy vrcholov, interný a externý
    - externý ukazuje na hlavný súbor (index alebo adresu dá sa vypočítať)
    - na tú adresu sa naseekujem, prečítam si celý blok dát kde to potom deserializujem na triedu blok a pracujem v tom ako programe
    - ak sme nevyužili všetky bity tak tam vložím jeden interný
    - tieto dáta vložím presipem do týchto dvoch blokov a nasipem pôvodné dáta
    - ak sa veštko presipalo na jednú stranu, tak na nový list nebudem davať adresu (-1)
    - ak som mynul všetky bity z hešu tak musím použiť preplňujúci súbor
    
    - v preplňujúcom súbore je adresa na daľší súbor, je to praktycký zreťazený zoznam,
    - nové miesto v súbore je pomocou manažerá voľných súborov (nie nová klasa),
        - on ukazuje na prvý voľný blok ukazuje na daľší volný blok
        - ak nemám tak vytváram nový blok, na konci súboru
    - pri mazaní budem tak tak spáje aby sa zmestili v hlavnom súbore, ak súčet v záznamov v nich je menší nanajvýš rovný blokovaciemu faktoru v hlavnom súbore
    - ak sa blok úplne vypráznil, (uvoľni blok - ak je na konci súboru tak ho skráti ak je uprostred tak ho zaradí do zreťazenia)
    
    - na súboroch treba 2 metódy, daj voľný blok, uvolni blok
        - ak je na konci, resp je posledný tak iba pomocou setSize sa konice súboru odreže, skráti
        - potom treba mazať postupne všetky prázne bloky ak by sme mali stiuáciu že x___x (x - dáta)
        - a zmažem posledný zázbam takže mám x____ tak súbor skrátim tak že vo výsledku budem mať x a nie x___
        - preto treba mať zreťazenie blokov obojsmerne aby som sa vedel zmazať jednoducho
    - inicializačný stav 
        - môže byť aj taký že mám tam jeden koreň a jeden blok v súbore, ideálne mať inicializačný stav koreň 2 isty a v súbore 2 bloky
    - nasledovník a predchodca je ako atribút bloku
    - prázne bloky nepremiestňujem
    - súbor má byť celý čas otovorený do uzatvorenia súboru
    - ak môžem zlučovať tak to nasipem do toho čo má menšiu adresu (optional)
    - ak mažem tak mažem záznamy postupne pomocou metódy stras (tak aby zobralo všetky dáta do arr, naplním tak že posledné ktoré ostanú prázdne tak odošlem do voľneho bloku
        - strasanie volám iba v tedy keď mám prázdny blok alebo keď viem že nejaký blok viem úšetriť
        - musíme do stromu pridať nejaké atribúty (počet všetkých záznamov, a počet blokov v zreťazení) a na základe toho zistím či viem ušetriť blok tak potom to strasieme
        
    - urobiť 2 testy že pridávam a mažem v rovnakej pravdepodobnosti
        - naplním strom a potom znovu pridávam a mažem s rovnakou pravdepodobnosťou
        - a aj také že sa mi to vyprázdnilo
        
    - blokovací faktor nemusí zodpovedať realite takže to nemusím riešiť
    - tieto dáta potrebujeme niekde uložiť, nejaké riadiace informácie uložiť
    - ukladanie sttomu čo najjednoduchšie tak aby sa to jednoducho uložilo,
    - nemusí to byť na budúci týždeň, ale treba ten strom ukladať
    
    - v strome nemáme mať výsledky hasov tie tam nemajú figurovať 
    
Pozriem sa do kódu a vyčíslim koľko krát som do toho kódu pristúpil, koľko kľokov som prečítal, koľko som zapísal
    Má sa dať podľa typov situácií, situácia 1 je takáto, situácia 2 je takáto ...
Nevyčísluje sa zložitosť