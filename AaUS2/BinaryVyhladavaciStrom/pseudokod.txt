binárny vyhľadávaci strom
pravý syn je väčší ako ľavý syn
insert slúži ako porovnávanie či je väčší ako ja
2 triedy:
    1. trieda: BSTREE
        root: BSTREENODE
        insert: (node: BSTREENODE):void -> {}
        
    2. trieda: BSTREENODE
        Left: BSTREENODE
        Right: BSTREENODE
        compare (panode: BSTREENODE): -1, 0, 1 => {} // virtualna metoda polymorfizmus
        
        
insert () = {
    actualnode: BSTREENODE
    actualnode = vložím koreň
    pokiaľ(actualnode != null) {
        if (actualdnoe.compare(panode) < 0 {
            a podľa toho sa to vloží do toho ktorého potomka
        }
    }
}
        
UPGRADE - použitie pomocou interface

3 triedy:
    1. trieda: BSTREE
        root: BSTREENODE
        insert: (node: BSTDATA):void -> {}
        
    2. trieda: BSTREENODE
        Left: BSTREENODE
        Right: BSTREENODE
        data: BSTDATA
    3. trieda: IBSTDATA
        compare (panode: BSTDATA): -1, 0, 1 => {} // virtualna metoda polymorfizmus
        
        
insert () = {
    actualnode: BSTDATA
    actualnode = vložím koreň
    pokiaľ(actualnode != null) {
        if (actualdnoe.data.compare(panode) < 0 {
            a podľa toho sa to vloží do toho ktorého potomka
        }
    }
}   

UPGRADE - použitie generík

3 triedy:
    1. trieda<T>: BSTREE
        root: BSTREENODE
        insert: (node<T>: BSTDATA):void -> {}
        
    2. trieda<T>: BSTREENODE
        Left: BSTREENODE
        Right: BSTREENODE
        data: BSTDATA
    3. trieda: IBSTDATA
        compare (panode<T>: <T> BSTDATA): -1, 0, 1 => {} // virtualna metoda polymorfizmus, v iComparable
        
        
insert () = {
    actualnode: BSTDATA
    actualnode = vložím koreň
    pokiaľ(actualnode != null) {
        if (actualdnoe.data.compare(panode) < 0 {
            a podľa toho sa to vloží do toho ktorého potomka
        }
    }
} 